<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>

  <properties>
    <title>Quartz Scheduler Component</title>
    <author email="epugh@opensourceconnections.com">Eric Pugh</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
     This Service functions as a wrapper around the Quartz Scheduler
   </p>

    <p>
      It is written for use in any Avalon compatible container.
    </p>
  </section>

<section name="Configuration">

    <p>
      First, here is the role configuration.
    </p>

    <source>
    <![CDATA[
        <role
            name="org.apache.fulcrum.quartz.QuartzService"
            shorthand="quartz"
            default-class="org.apache.fulcrum.quartz.DefaultQuartzService"/>
    ]]>
    </source>

      <p>
        Now comes the job configuration:
      </p>

    <source>
    <![CDATA[
    <quartz>
        <globalJobListener className="org.apache.fulcrum.quartz.listener.FooListener" />
        <scheduled jobName="simpleJob" jobGroup="DEFAULT_GROUP" triggerName="cron" triggerGroup="OTHER_GROUP"/>
        <jobDetails>
            <list>
              <org.quartz.JobDetail>
                <name>simpleJob</name>
                <group>DEFAULT_GROUP</group>
                <jobClass>org.apache.fulcrum.quartz.test.SimpleJob</jobClass>
                <volatility>false</volatility>
                <durability>false</durability>
                <shouldRecover>false</shouldRecover>
                <jobListeners/>
              </org.quartz.JobDetail>
              <org.quartz.JobDetail>
                <name>notSoSimpleJob</name>
                <group>DEFAULT_GROUP</group>
                <jobClass>org.apache.fulcrum.quartz.test.NotSoSimpleJob</jobClass>
                <volatility>false</volatility>
                <durability>false</durability>
                <shouldRecover>false</shouldRecover>
                <jobListeners/>
              </org.quartz.JobDetail>
            </list>
        </jobDetails>
        <triggers>
            <list>
              <org.quartz.CronTrigger>
                <startTime>2005-10-20 11:10:45.0 EDT</startTime>
                <misfireInstruction>0</misfireInstruction>
                <volatility>false</volatility>
                <group>OTHER_GROUP</group>
                <jobGroup>DEFAULT_GROUP</jobGroup>
                <jobName>notSoSimpleJob</jobName>
                <name>cron</name>
                <triggerListeners/>
                <cronEx serialization="custom">
                  <org.quartz.CronExpression>
                    <default>
                      <cronExpression>0 0 12 * * ?</cronExpression>
                    </default>
                  </org.quartz.CronExpression>
                </cronEx>
              </org.quartz.CronTrigger>
              <org.quartz.SimpleTrigger>
                <name>simpleTrigger</name>
                <group>DEFAULT_GROUP</group>
                <description>test</description>
              </org.quartz.SimpleTrigger>
            </list>
        </triggers>
    </quartz>
    ]]>
    </source>

    <p>
    <b>Note:</b> The section for CronTrigger has to date varied with Quartz
    releases (the one above is suitable for Quartz 1.5.2).  The format depends
    on how <a href="http://xstream.codehaus.org/">XStream</a> processes the
    <a href="http://www.opensymphony.com/quartz/api/serialized-form.html#org.quartz.CronTrigger">
    serialized form</a> of
    <a href="http://www.opensymphony.com/quartz/api/org/quartz/CronTrigger.html">CronTrigger</a>.
    </p>

    <p>
    Refer to the <a href="http://www.opensymphony.com/quartz/api/">Quartz JavaDoc</a>
    for details of the serialized form of the other configuration elements.
    </p>

  </section>

  <section name="Usage">

    <p>
    Scheduled tasks are quite straightforward to create.  The only requirement
    is that the interface 
    <a href="http://www.opensymphony.com/quartz/api/org/quartz/Job.html">org.quartz.Job</a>
    be implemented.  This requires just that one method be defined, execute(), whose
    <a href="http://www.opensymphony.com/quartz/api/org/quartz/JobExecutionContext.html">
    org.quartz.JobExecutionContext</a> argument provides you with details of the
    execution context when the task is triggered.
    </p>

    <source>
    <![CDATA[
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class SimpleJob implements Job
{
	public static boolean executed = false;

    public SimpleJob()
    {
        super();
    }

    public void execute(JobExecutionContext context)
        throws JobExecutionException
    {
        executed = true;
    }
}
    ]]>
    </source>

	<p>
	An additional example can be found in the unit tests for this component.
	</p>

  </section>

</body>
</document>
